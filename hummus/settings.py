# This file was originally generated by 'django-admin startproject'
# using Django 3.1.4

import os
from pathlib import Path

from django.core.management.utils import get_random_secret_key


def get_bool_variable(name, default):
    var = os.environ.get(name)
    if var:
        var_lower = var.lower()
        if var_lower == "true":
            return True
        elif var_lower == "false":
            return False
        else:
            raise ValueError("`{}' is not true or false".format(var))
    else:
        return default


########################################################################
# Build paths inside the project like this: BASE_DIR / 'subdir'.       #
########################################################################

BASE_DIR = Path(__file__).resolve().parent.parent


########################################################################
# SECURITY WARNING: keep the secret key used in production secret!     #
########################################################################

SECRET_KEY = os.environ.get("SECRET_KEY", get_random_secret_key())


########################################################################
# SECURITY WARNING: don't run with debug turned on in production!      #
########################################################################

DEBUG = get_bool_variable("DEBUG", False)


########################################################################
# List of hosts/domain names that Django will serve. This must be      #
# specified in production!                                             #
########################################################################

if "HOST" in os.environ:
    ALLOWED_HOSTS = [os.environ["HOST"]]
else:
    ALLOWED_HOSTS = []


########################################################################
# Name of the "home" application                                       #
########################################################################

HOME_APP = os.environ.get("HOME_APP")
if HOME_APP:
    HOME_URLS = os.environ["HOME_URLS"]


########################################################################
# Application definition                                               #
########################################################################

INSTALLED_APPS = [
    "forum.apps.ForumConfig",
    "django.contrib.humanize",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
if HOME_APP:
    INSTALLED_APPS.insert(0, HOME_APP)


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "hummus.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "hummus.context_processors.settings",
            ],
        },
    },
]

WSGI_APPLICATION = "hummus.wsgi.application"


########################################################################
# Database                                                             #
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases        #
########################################################################

if get_bool_variable("USE_SQLITE", False):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": os.getenv("DB_NAME", default="hummus"),
            "USER": os.getenv("DB_USER", default="hummus"),
            "PASSWORD": os.getenv("DB_PASSWORD", default=""),
            "HOST": os.getenv("DB_HOST", default="localhost"),
            "PORT": os.getenv("DB_PORT", default="5432"),
        }
    }


################################################################################
# Password validation                                                          #
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators #
################################################################################

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


########################################################################
# Internationalization                                                 #
# https://docs.djangoproject.com/en/3.1/topics/i18n/                   #
########################################################################

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True


########################################################################
# Static files (CSS, JavaScript, Images)                               #
# https://docs.djangoproject.com/en/3.1/howto/static-files/            #
########################################################################

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


########################################################################
# Login settings                                                       #
########################################################################

LOGIN_URL = "/login"
LOGIN_REDIRECT_URL = "/"

USE_OIDC = get_bool_variable("USE_OIDC", False)
if USE_OIDC:
    LOGOUT_REDIRECT_URL = "/logged-out"  # See urls.py
    INSTALLED_APPS.insert(
        INSTALLED_APPS.index("django.contrib.auth") + 1, "mozilla_django_oidc"
    )
    AUTHENTICATION_BACKENDS = [
        "hummus.oidc.HummusOIDCAuthenticationBackend",
        "django.contrib.auth.backends.ModelBackend",
    ]
    OIDC_RP_CLIENT_ID = os.environ["OIDC_RP_CLIENT_ID"]
    OIDC_RP_CLIENT_SECRET = os.environ["OIDC_RP_CLIENT_SECRET"]
    OIDC_OP_AUTHORIZATION_ENDPOINT = os.environ["OIDC_OP_AUTHORIZATION_ENDPOINT"]
    OIDC_OP_TOKEN_ENDPOINT = os.environ["OIDC_OP_TOKEN_ENDPOINT"]
    OIDC_OP_USER_ENDPOINT = os.environ["OIDC_OP_USER_ENDPOINT"]
    OIDC_RP_SIGN_ALGO = os.environ["OIDC_RP_SIGN_ALGO"]
    if OIDC_RP_SIGN_ALGO == "RS256":
        jwks_endpoint = os.environ.get("OIDC_OP_JWKS_ENDPOINT")
        if jwks_endpoint:
            OIDC_OP_JWKS_ENDPOINT = jwks_endpoint
        rp_idc_sign_key = os.environ.get("OIDC_RP_IDP_SIGN_KEY")
        if rp_idc_sign_key:
            OIDC_RP_IDP_SIGN_KEY = rp_idc_sign_key


########################################################################
# Deployment security                                                  #
########################################################################

if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
